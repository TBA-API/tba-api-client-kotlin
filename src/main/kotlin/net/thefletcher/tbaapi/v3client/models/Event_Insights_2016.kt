/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* OpenAPI spec version: 3.03.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package net.thefletcher.tbaapi.v3client.models


/**
 * Insights for FIRST Stronghold qualification and elimination matches.
 * @param LowBar For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param A_ChevalDeFrise For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param A_Portcullis For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param B_Ramparts For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param B_Moat For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param C_SallyPort For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param C_Drawbridge For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param D_RoughTerrain For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param D_RockWall For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage.
 * @param average_high_goals Average number of high goals scored.
 * @param average_low_goals Average number of low goals scored.
 * @param breaches An array with three values, number of times breached, number of opportunities to breach, and percentage.
 * @param scales An array with three values, number of times scaled, number of opportunities to scale, and percentage.
 * @param challenges An array with three values, number of times challenged, number of opportunities to challenge, and percentage.
 * @param captures An array with three values, number of times captured, number of opportunities to capture, and percentage.
 * @param average_win_score Average winning score.
 * @param average_win_margin Average margin of victory.
 * @param average_score Average total score.
 * @param average_auto_score Average autonomous score.
 * @param average_crossing_score Average crossing score.
 * @param average_boulder_score Average boulder score.
 * @param average_tower_score Average tower score.
 * @param average_foul_score Average foul score.
 * @param high_score An array with three values, high score, match key from the match with the high score, and the name of the match.
 */
data class Event_Insights_2016 (
    /* For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val LowBar: kotlin.Array<kotlin.Float>,
    /* For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val A_ChevalDeFrise: kotlin.Array<kotlin.Float>,
    /* For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val A_Portcullis: kotlin.Array<kotlin.Float>,
    /* For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val B_Ramparts: kotlin.Array<kotlin.Float>,
    /* For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val B_Moat: kotlin.Array<kotlin.Float>,
    /* For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val C_SallyPort: kotlin.Array<kotlin.Float>,
    /* For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val C_Drawbridge: kotlin.Array<kotlin.Float>,
    /* For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val D_RoughTerrain: kotlin.Array<kotlin.Float>,
    /* For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
    val D_RockWall: kotlin.Array<kotlin.Float>,
    /* Average number of high goals scored. */
    val average_high_goals: kotlin.Float,
    /* Average number of low goals scored. */
    val average_low_goals: kotlin.Float,
    /* An array with three values, number of times breached, number of opportunities to breach, and percentage. */
    val breaches: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times scaled, number of opportunities to scale, and percentage. */
    val scales: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times challenged, number of opportunities to challenge, and percentage. */
    val challenges: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times captured, number of opportunities to capture, and percentage. */
    val captures: kotlin.Array<kotlin.Float>,
    /* Average winning score. */
    val average_win_score: kotlin.Float,
    /* Average margin of victory. */
    val average_win_margin: kotlin.Float,
    /* Average total score. */
    val average_score: kotlin.Float,
    /* Average autonomous score. */
    val average_auto_score: kotlin.Float,
    /* Average crossing score. */
    val average_crossing_score: kotlin.Float,
    /* Average boulder score. */
    val average_boulder_score: kotlin.Float,
    /* Average tower score. */
    val average_tower_score: kotlin.Float,
    /* Average foul score. */
    val average_foul_score: kotlin.Float,
    /* An array with three values, high score, match key from the match with the high score, and the name of the match. */
    val high_score: kotlin.Array<kotlin.String>
) {

}

