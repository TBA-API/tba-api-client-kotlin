/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* OpenAPI spec version: 3.03.1
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package net.thefletcher.tbaapi.v3client.models

import net.thefletcher.tbaapi.v3client.models.WLT_Record

/**
 * Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun.
 * @param level The highest playoff level the team reached.
 * @param current_level_record 
 * @param record 
 * @param status Current competition status for the playoffs.
 * @param playoff_average The average match score during playoffs. Year specific. May be null if not relevant for a given year.
 */
data class Team_Event_Status_playoff (
    /* The highest playoff level the team reached. */
    val level: Team_Event_Status_playoff.Level? = null,
    val current_level_record: WLT_Record? = null,
    val record: WLT_Record? = null,
    /* Current competition status for the playoffs. */
    val status: Team_Event_Status_playoff.Status? = null,
    /* The average match score during playoffs. Year specific. May be null if not relevant for a given year. */
    val playoff_average: kotlin.Int? = null
) {

    /**
    * The highest playoff level the team reached.
    * Values: qm,ef,qf,sf,f
    */
    enum class Level(val value: kotlin.Any){
    
        qm("qm"),
    
        ef("ef"),
    
        qf("qf"),
    
        sf("sf"),
    
        f("f");
    
    }

    /**
    * Current competition status for the playoffs.
    * Values: won,eliminated,playing
    */
    enum class Status(val value: kotlin.Any){
    
        won("won"),
    
        eliminated("eliminated"),
    
        playing("playing");
    
    }

}

