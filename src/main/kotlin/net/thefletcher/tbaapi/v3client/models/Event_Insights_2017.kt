/**
* The Blue Alliance API v3
* # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.
*
* OpenAPI spec version: 3.04.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package net.thefletcher.tbaapi.v3client.models


/**
 * Insights for FIRST STEAMWORKS qualification and elimination matches.
 * @param average_foul_score Average foul score.
 * @param average_fuel_points Average fuel points scored.
 * @param average_fuel_points_auto Average fuel points scored during auto.
 * @param average_fuel_points_teleop Average fuel points scored during teleop.
 * @param average_high_goals Average points scored in the high goal.
 * @param average_high_goals_auto Average points scored in the high goal during auto.
 * @param average_high_goals_teleop Average points scored in the high goal during teleop.
 * @param average_low_goals Average points scored in the low goal.
 * @param average_low_goals_auto Average points scored in the low goal during auto.
 * @param average_low_goals_teleop Average points scored in the low goal during teleop.
 * @param average_mobility_points_auto Average mobility points scored during auto.
 * @param average_points_auto Average points scored during auto.
 * @param average_points_teleop Average points scored during teleop.
 * @param average_rotor_points Average rotor points scored.
 * @param average_rotor_points_auto Average rotor points scored during auto.
 * @param average_rotor_points_teleop Average rotor points scored during teleop.
 * @param average_score Average score.
 * @param average_takeoff_points_teleop Average takeoff points scored during teleop.
 * @param average_win_margin Average margin of victory.
 * @param average_win_score Average winning score.
 * @param high_kpa An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match
 * @param high_score An array with three values, high score, match key from the match with the high score, and the name of the match
 * @param kpa_achieved An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage.
 * @param mobility_counts An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage.
 * @param rotor_1_engaged An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage.
 * @param rotor_1_engaged_auto An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage.
 * @param rotor_2_engaged An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage.
 * @param rotor_2_engaged_auto An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage.
 * @param rotor_3_engaged An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage.
 * @param rotor_4_engaged An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage.
 * @param takeoff_counts An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage.
 * @param unicorn_matches An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage.
 */
data class Event_Insights_2017 (
    /* Average foul score. */
    val average_foul_score: kotlin.Float,
    /* Average fuel points scored. */
    val average_fuel_points: kotlin.Float,
    /* Average fuel points scored during auto. */
    val average_fuel_points_auto: kotlin.Float,
    /* Average fuel points scored during teleop. */
    val average_fuel_points_teleop: kotlin.Float,
    /* Average points scored in the high goal. */
    val average_high_goals: kotlin.Float,
    /* Average points scored in the high goal during auto. */
    val average_high_goals_auto: kotlin.Float,
    /* Average points scored in the high goal during teleop. */
    val average_high_goals_teleop: kotlin.Float,
    /* Average points scored in the low goal. */
    val average_low_goals: kotlin.Float,
    /* Average points scored in the low goal during auto. */
    val average_low_goals_auto: kotlin.Float,
    /* Average points scored in the low goal during teleop. */
    val average_low_goals_teleop: kotlin.Float,
    /* Average mobility points scored during auto. */
    val average_mobility_points_auto: kotlin.Float,
    /* Average points scored during auto. */
    val average_points_auto: kotlin.Float,
    /* Average points scored during teleop. */
    val average_points_teleop: kotlin.Float,
    /* Average rotor points scored. */
    val average_rotor_points: kotlin.Float,
    /* Average rotor points scored during auto. */
    val average_rotor_points_auto: kotlin.Float,
    /* Average rotor points scored during teleop. */
    val average_rotor_points_teleop: kotlin.Float,
    /* Average score. */
    val average_score: kotlin.Float,
    /* Average takeoff points scored during teleop. */
    val average_takeoff_points_teleop: kotlin.Float,
    /* Average margin of victory. */
    val average_win_margin: kotlin.Float,
    /* Average winning score. */
    val average_win_score: kotlin.Float,
    /* An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match */
    val high_kpa: kotlin.Array<kotlin.String>,
    /* An array with three values, high score, match key from the match with the high score, and the name of the match */
    val high_score: kotlin.Array<kotlin.String>,
    /* An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. */
    val kpa_achieved: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. */
    val mobility_counts: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. */
    val rotor_1_engaged: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. */
    val rotor_1_engaged_auto: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. */
    val rotor_2_engaged: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. */
    val rotor_2_engaged_auto: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. */
    val rotor_3_engaged: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. */
    val rotor_4_engaged: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. */
    val takeoff_counts: kotlin.Array<kotlin.Float>,
    /* An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. */
    val unicorn_matches: kotlin.Array<kotlin.Float>
) {

}

